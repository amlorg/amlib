var helpStr = 'file:\n'
+'read(path)	参数: path 路径字符串	读取文本文件，返回String对象\n'
+'create(path, text)	参数: path 路径字符串，text 内容字符串		创建文本文件，返回File对象\n'
+'getFileFromFolder(folder, format)	参数: folder 文件夹，format 格式如\'png|jpg\'		从文件夹获取文件\n';

module.exports = {
	help : helpStr,
	read: function (file) {//读取文本文件，返回String对象（文本文件路径）
		file.open("r");
		var myString = file.read();
		file.close();
		
		return myString;
	},
	create: function (path, text) {//创建文本文件，返回File对象（文本文件路径，文本内容）
		var newFile = new File(path);
		newFile.open('w');
		newFile.encoding = 'UTF-8';
		if(text != null) {
			newFile.write(text);
		}
		newFile.close();
		
		return newFile;
	},
	getFileFromFolder: function (folder, format) {//从文件夹获取文件（数组，文件夹，格式(例如'png|jpg')）
		var array = [];
		gfff(array, folder, format);
		return array;
		function gfff(array, folder, format) {
			var pathFiles = folder.getFiles();
			for(var i = 0; i < pathFiles.length; i++) {
				if (pathFiles[i] instanceof Folder){
					if(pathFiles[i].name.match(/^\(.*\)$/)) {
						continue;
					}
					arguments.callee(array, pathFiles[i], format);
				}else {
					if(format == null) {
						continue;
					}
					if(eval("pathFiles[i].name.match(/\.(" + format + ")$/)")) {
						var newItem = array.push(pathFiles[i]);
						newItem.parent = folder;
					}
				}
			}
		}
	},
    //Evaluate a file and catch the exception.
    evalFile: function(path, mode) {
       // try {
       	if(mode) {
       		eval(this.read(File(path)));
       	}else {
            $.evalFile(path);
       	}
       // } catch (err) {alert("Exception:" + err);}
    },
    // Evaluate all the files in the given folder 
    evalFiles: function(jsxFolderPath, mode) {
        var folder = new Folder(jsxFolderPath);
        if (folder.exists) {
            var jsxFiles = folder.getFiles("*.jsx");
            for (var i = 0; i < jsxFiles.length; i++) {
                var jsxFile = jsxFiles[i];
                this.evalFile(jsxFile, mode);
            }
        }
    },
	createAEExpression: function(fn, args) {
		var fnStr = fn.toString(),
			k, v, b, e;

		for(k in args) {
			v  = (typeof args[k] === 'string') ? '"' + args[k] + '"' : args[k];
			k = new RegExp('\\$' + k + '\\$', 'g');
			fnStr = fnStr.replace(k, v);
		}

		b = fnStr.indexOf('{') + 1;
		e = fnStr.lastIndexOf('}') - b;
		return fnStr.substr(b, e).replace(/(^\s*)|(\s*$)|(\t)|(\r\n)|(\n)/g, '');
	}
}
