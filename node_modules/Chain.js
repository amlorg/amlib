function Node(data, prev, next) {
	this.data = data;
	this._next = prev;
	this._prev = next;
	this._head = null;
	this._tail = null;
	this.length = 0;
}

Node.prototype.add = function(node) {
	if(this._tail == null) {
		this._head = this._tail = node;
	}else {
		this._tail._next = node;
		node._prev = this._tail;
		this._tail = node;
	}
	this.length++;
	return node;
}

Node.prototype.remove = function(node) {
	var prev = node._prev;
	var next = node._next;
	if(prev) prev._next = next;
	if(next) next._prev = prev;
	if(this._head == node) this._head = next;
	if(this._tail == node) this._tail = prev;
	this.length--;
}

Node.prototype.clear = function() {
	this._head = this._tail = null;
	this.length = 0;
}

Node.prototype.length = function() {
	var i = 0;
	var node = this._head;
	while(node) {
		i++;
		node = node._next;
	}
	this.length = i;
	return i;
}

Node.prototype.children = function() {
	var i = 0;
	var children = [];
	var node = this._head;
	while(node) {
		i++;
		children.push(node);
		node = node._next;
	}
	this.length = i;
	return children;
}

Node.prototype.each = function(fn) {
	var node = this._head;
	while(node) {
		fn(node);
		node = node._next;
	}
}

Node.prototype.next = function() {
	return this._next;
}

Node.prototype.prev = function() {
	return this._prev;
}

Node.prototype.head = function() {
	return this._head;
}

Node.prototype.tail = function() {
	return this._tail;
}


module.exports = {
	createNode : function(data, prev, next) {
		return new Node(data, prev, next);
	}
};